@TestOn('vm')
import 'dart:io';

import 'package:test/test.dart';

void main() {
  group('dartdevc', () {
    setUpAll(() {
      final compile = Process.runSync(
          'pub', ['run', 'build_runner', 'build', '--output', 'build']);
      expect(compile.exitCode, 0);
    });
    tearDownAll(() {
      final buildDir = new Directory('build');
      if (buildDir.existsSync()) {
        buildDir.deleteSync(recursive: true);
      }
    });

    test('compile', () {
      final run = Process.runSync('node', ['build/node/hello_world.dart.js'],
          runInShell: true);
      expect(run.exitCode, 0);
      expect(run.stdout, 'Hello world\n');
      // 3.1514934010709914
    });

    test('exports', () {
      final run =
          Process.runSync('node', ['test/slow_pi.js'], runInShell: true);
      expect(run.exitCode, 0);
      expect(run.stdout, contains('slowPi(100): 3.1514934010709914\n'));
      expect(run.stdout, contains('fastPi: 3.1514934010709914\n'));
      expect(run.stdout, contains('defaultAccuracy: 100\n'));
    });
  });

  group('dart2js', () {
    setUpAll(() {
      final compile = Process.runSync('pub', [
        'run',
        'build_runner',
        'build',
        '--define',
        'build_node_compilers|entrypoint=compiler=dart2js',
        '--output',
        'build',
      ]);
      expect(compile.exitCode, 0, reason: compile.stdout);
    });

    tearDownAll(() {
      final buildDir = new Directory('build');
      if (buildDir.existsSync()) {
        buildDir.deleteSync(recursive: true);
      }
    });

    test('compile', () {
      final mainScript = new File('build/node/hello_world.dart.js');
      expect(mainScript.readAsStringSync(), contains('Generated by dart2js'));

      final run = Process.runSync('node', ['build/node/hello_world.dart.js'],
          runInShell: true);
      expect(run.exitCode, 0);
      expect(run.stdout, 'Hello world\n');
    });

    test('exports', () {
      final run =
          Process.runSync('node', ['test/slow_pi.js'], runInShell: true);
      expect(run.exitCode, 0);
      expect(run.stdout, contains('slowPi(100): 3.1514934010709914\n'));
      expect(run.stdout, contains('fastPi: 3.1514934010709914\n'));
      expect(run.stdout, contains('defaultAccuracy: 100\n'));
    });
  });
}
